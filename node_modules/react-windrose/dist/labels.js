import { jsx as _jsx } from "react/jsx-runtime";
import {} from "d3-scale";
import {} from "react";
import { fluidFontSize, TURN } from "./util.js";
/**
 * Renders a group of direction labels around a circular chart
 * @param props - The component props
 * @returns A group of SVG text elements positioned around a circle
 */
export function DirectionLabels({ outerRadius, directionScale, directions, fontSize = fluidFontSize(0.1)(outerRadius), ...props }) {
    const angleOffset = -TURN / directions.length / 2;
    return (_jsx("g", { name: "direction-labels", fontWeight: "600", textAnchor: "middle", dominantBaseline: "middle", paintOrder: "stroke", strokeWidth: "1px", stroke: "white", fill: "black", fontSize: fontSize, ...props, children: directions.map((direction) => (_jsx(Label, { direction: direction, angleOffset: angleOffset, directionScale: directionScale, outerRadius: outerRadius }, direction))) }));
}
/**
 * Renders a single direction label positioned around a the wind rose
 * @param props - The component props
 * @returns An SVG text element positioned at the correct angle and distance
 */
export function Label({ direction, angleOffset, directionScale, outerRadius, offset = 0.1 * outerRadius, }) {
    const baseRotation = directionScale(direction) + directionScale.bandwidth() / 2;
    const isInLeftHalf = (baseRotation + Math.PI / 2) % (2 * Math.PI) < Math.PI;
    const rotationLabel = isInLeftHalf ? 90 : -90;
    const rotation = (baseRotation * 180) / Math.PI - (90 - angleOffset);
    return (_jsx("text", { name: "label", paintOrder: "stroke", strokeWidth: "1px", stroke: "white", transform: `rotate(${rotation}) translate(${outerRadius + offset},0) rotate(${rotationLabel})`, children: direction }));
}
//# sourceMappingURL=labels.js.map