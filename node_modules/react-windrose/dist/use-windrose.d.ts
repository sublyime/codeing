import { type SeriesPoint } from "d3-shape";
import type { WindroseDataPoint } from "./types.js";
/**
 * Props for the useWindRose hook
 * @template TBins - Type of the bins array
 * @template TDirections - Type of the directions array
 */
export type UseWindRose<TBins extends ReadonlyArray<string> = ReadonlyArray<string>, TDirections extends ReadonlyArray<string> = ReadonlyArray<string>> = {
    /** Array of bin labels for the wind rose segments */
    bins: TBins;
    /** Array of data points for the wind rose chart */
    data: ReadonlyArray<WindroseDataPoint<TBins[number], TDirections[number]>>;
    /** Inner radius of the wind rose chart */
    innerRadius: number;
    /** Outer radius of the wind rose chart */
    outerRadius: number;
    /** Array of colors to use for the wind rose segments */
    colorScheme: ReadonlyArray<string>;
    /** Optional array of direction labels to display. If not provided, all directions from data will be shown.
     * This allows displaying fewer labels than there are directions in the data. */
    labelDirections?: Array<string>;
    /** Angle padding between segments in radians */
    padAngle?: number;
    /** Optional maximum value for the y-axis scale. If not provided, will use the maximum value in the data */
    maxY?: number;
};
/**
 * A React hook that generates the necessary scales and data transformations for a wind rose chart.
 * This hook handles the creation of angular scales for directions, radial scales for values,
 * color scales for bins, and arc generators for the segments.
 *
 * @template TBins - Type of the bins array
 * @template TDirections - Type of the directions array
 * @param props - Configuration object for the wind rose chart
 * @returns An object containing:
 *   - directionScale: Scale for positioning direction labels
 *   - yScale: Radial scale for mapping values to radius
 *   - colorScale: Ordinal scale for mapping bins to colors
 *   - arcGenerator: Function for generating arc paths for segments
 *   - stackedData: Data transformed for stacked segments
 *   - angleStep: Angular step between segments
 *   - angleOffset: Angular offset for centering segments
 */
export declare function useWindRose<TBins extends ReadonlyArray<string> = ReadonlyArray<string>, TDirections extends ReadonlyArray<string> = ReadonlyArray<string>>({ data, bins, innerRadius, outerRadius, colorScheme, labelDirections, padAngle, maxY, }: UseWindRose<TBins, TDirections>): {
    directionScale: import("d3-scale").ScaleBand<string>;
    directions: string[];
    yScale: import("d3-scale").ScaleLinear<number, number, never>;
    colorScale: import("d3-scale").ScaleOrdinal<string, string, never>;
    arcGenerator: import("d3-shape").Arc<any, SeriesPoint<{
        direction: string;
    }>>;
    stackedData: import("d3-shape").Series<import("./types.js").BinsPoint<TBins[number]> & import("./types.js").DirectionData<TDirections[number]> extends infer T ? { [K in keyof T]: (import("./types.js").BinsPoint<TBins[number]> & import("./types.js").DirectionData<TDirections[number]>)[K]; } : never, TBins[number]>[];
    angleStep: number;
    angleOffset: number;
};
